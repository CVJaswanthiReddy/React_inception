 What is crossorigin in script tag?

Anonymous: If crossorigin="anonymous" is specified, the script can be loaded from a different origin, and the browser will not send any credentials (such as cookies or HTTP authentication) along with the request for the script. This is the default behavior if the crossorigin attribute is present without a value.

Example:

Code
<script src="https://example.com/script.js" crossorigin="anonymous"></script>
Use Credentials: If crossorigin="use-credentials" is specified, the browser will send credentials (such as cookies) along with the request for the script, if the requesting origin has appropriate credentials.

Example:

Code
<script src="https://example.com/script.js" crossorigin="use-credentials"></script>
Why Use crossorigin?
Security: It helps prevent certain types of attacks, such as cross-site request forgery (CSRF), by controlling how scripts are loaded from different origins.
Error Handling: It allows the browser to handle errors more appropriately when loading scripts from other origins, by enforcing CORS (Cross-Origin Resource Sharing) policies.
When to Use crossorigin?
You generally need to use crossorigin when you are loading scripts from a different domain, especially when the server hosting the script does not support CORS or requires specific handling of credentials.
Notes:
Same Origin Policy: Browsers enforce a same-origin policy by default, which restricts how scripts and other resources from different origins can interact with each other. crossorigin provides a way to relax or enforce these restrictions explicitly.

Modern Browsers: Most modern browsers support crossorigin, and it's typically used when loading scripts from CDNs or other external sources.

example

Code
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
The crossorigin attribute is used to specify that the scripts (react.development.js and react-dom.development.js) can be loaded from a different origin (https://unpkg.com in this case) and how the browser should handle credentials if any are required.